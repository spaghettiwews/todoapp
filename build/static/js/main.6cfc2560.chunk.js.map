{"version":3,"sources":["ToDo.js","AddToDoForm.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","className","this","props","completed","type","value","title","onChange","dismissToDo","id","React","Component","AddToDoForm","onSubmit","addToDo","name","updateNewToDo","todos","App","event","setState","newToDo","shortid","generate","target","trim","preventDefault","state","updatedToDos","push","reset","map","todo","bind","item","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAqBeA,G,uLAlBD,IAAD,OACL,OACA,wBAAIC,UAAWC,KAAKC,MAAMC,UAAY,WAAY,cAC9C,+BAEI,2BACAC,KAAK,WACLC,MAAOJ,KAAKC,MAAMI,MAClBC,SAAU,WAAK,EAAKL,MAAMM,YAAY,EAAKN,MAAMO,OAEhDR,KAAKC,MAAMI,Y,GAXTI,IAAMC,YCWVC,E,iLATP,OACI,0BAAMC,SAAUZ,KAAKC,MAAMY,SACvB,4CAAiB,6BAAK,2BAAOC,KAAK,QAAQX,KAAK,OAAOG,SAAUN,KAAKC,MAAMc,iBAC3E,4BAAQZ,KAAK,UAAb,oB,GALUM,IAAMC,W,iBCI1BM,EAAQ,GAEOC,E,YACnB,WAAYhB,GAAO,IAAD,8BAChB,4CAAMA,KAYRc,cAAgB,SAACG,GACf,EAAKC,SAAS,CACZC,QAAS,CAACZ,GAAGa,IAAQC,WAAYjB,MAAMa,EAAMK,OAAOnB,MAAMoB,OAAQtB,WAAU,MAf9D,EAmBlBW,QAAU,SAACK,GAET,GADAA,EAAMO,iBACqB,OAAvB,EAAKC,MAAMN,SAAwD,KAApC,EAAKM,MAAMN,QAAQf,MAAMmB,OAAe,CACzE,IAAIG,EAAe,EAAKD,MAAMV,MAC9BW,EAAaC,KAAK,EAAKF,MAAMN,SAC7B,EAAKD,SAAS,CAACC,QAAQ,KAAMJ,MAAOW,IACpCT,EAAMK,OAAOM,UAzBC,EA6BlBtB,YAAc,SAACC,GAOb,IAAImB,EAAe,EAAKD,MAAMV,MAAMc,KAAI,SAAAC,GAItC,OAHIvB,IAAOuB,EAAKvB,KACduB,EAAK7B,WAAa6B,EAAK7B,WAElB6B,KAET,EAAKZ,SAAS,CAACC,QAAQ,KAAMJ,MAAOW,KAvCpC,EAAKD,MAAQ,CACXN,QAAS,KACTJ,SAGF,EAAKH,QAAU,EAAKA,QAAQmB,KAAb,gBACf,EAAKjB,cAAgB,EAAKA,cAAciB,KAAnB,gBACrB,EAAKzB,YAAc,EAAKA,YAAYyB,KAAjB,gBAVH,E,sEA6CR,IAAD,OACP,OACE,yBAAKjC,UAAU,OACb,4BACGC,KAAK0B,MAAMV,MAAMc,KAAI,SAACG,GAAD,OAAU,kBAAC,EAAD,eAAMC,IAAKD,EAAKzB,IAAQyB,EAAxB,CAA8B1B,YAAa,EAAKA,mBAElF,kBAAC,EAAD,CAAaM,QAASb,KAAKa,QAASE,cAAef,KAAKe,qB,GApD/BN,IAAMC,WCInByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6cfc2560.chunk.js","sourcesContent":["import React from 'react';\n\nclass ToDo extends React.Component {\n    render() { \n        return ( \n        <li className={this.props.completed ? 'complete': 'incomplete'}>\n            <label>\n\n                <input \n                type=\"checkbox\" \n                value={this.props.title}\n                onChange={()=>{this.props.dismissToDo(this.props.id)}} />\n\n                {this.props.title}\n\n            </label>\n        </li>\n         );\n    }\n}\n \nexport default ToDo;","import React from 'react';\n\nclass AddToDoForm extends React.Component {\n    render() { \n        return (  \n            <form onSubmit={this.props.addToDo}>\n                <label>Task name:<br/><input name=\"title\" type=\"text\" onChange={this.props.updateNewToDo}/></label>\n                <button type=\"submit\">Create task</button>\n            </form>\n        );\n    }\n}\n \nexport default AddToDoForm;","import React from 'react';\nimport './App.css';\nimport ToDo from './ToDo';\nimport AddToDoForm from './AddToDoForm';\nimport shortid from 'shortid';\n\nconst todos = [];\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      newToDo: null,\n      todos\n    }\n\n    this.addToDo = this.addToDo.bind(this);\n    this.updateNewToDo = this.updateNewToDo.bind(this);\n    this.dismissToDo = this.dismissToDo.bind(this);\n  }\n\n  updateNewToDo = (event) => {\n    this.setState({\n      newToDo: {id:shortid.generate(), title:event.target.value.trim(), completed:false}\n    })\n  }\n  \n  addToDo = (event) => {\n    event.preventDefault();\n    if (this.state.newToDo !== null && this.state.newToDo.title.trim() !== '') {\n      let updatedToDos = this.state.todos;\n      updatedToDos.push(this.state.newToDo);\n      this.setState({newToDo:null, todos: updatedToDos});\n      event.target.reset();\n    }\n  }\n  \n  dismissToDo = (id) => {\n    // console.log(id);\n\n    /* v.0.1 deletes/filters out completed todos */\n    //let updatedToDos = this.state.todos.filter(todo => id !== todo.id); \n\n    /* v.0.2 toggles todo status */\n    let updatedToDos = this.state.todos.map(todo => {\n      if (id === todo.id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })\n    this.setState({newToDo:null, todos: updatedToDos});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ul>\n          {this.state.todos.map((item) => <ToDo key={item.id} {...item} dismissToDo={this.dismissToDo}/>)}\n        </ul>\n        <AddToDoForm addToDo={this.addToDo} updateNewToDo={this.updateNewToDo}/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}